import { BoxrecDate } from 'boxrec-requests';
import { BoxrecLocationEventParams, BoxrecLocationsPeopleParams, BoxrecRole } from 'boxrec-requests';
import { BoxrecPageChampions } from './boxrec-pages/champions/boxrec.page.champions';
import { BoxrecPageDate } from './boxrec-pages/date/boxrec.page.date';
import { BoxrecPageEventBout } from './boxrec-pages/event/bout/boxrec.page.event.bout';
import { BoxrecPageEvent } from './boxrec-pages/event/boxrec.page.event';
import { BoxrecPageLocationEvent } from './boxrec-pages/location/event/boxrec.page.location.event';
import { BoxrecPageLocationBoxer } from './boxrec-pages/location/people/boxrec.page.location.boxer';
import { BoxrecPageLocationPeople } from './boxrec-pages/location/people/boxrec.page.location.people';
import { BoxrecPageProfileBoxer } from './boxrec-pages/profile/boxrec.page.profile.boxer';
import { BoxrecPageProfileEvents } from './boxrec-pages/profile/boxrec.page.profile.events';
import { BoxrecPageProfileManager } from './boxrec-pages/profile/boxrec.page.profile.manager';
import { BoxrecPageProfileOtherCommon } from './boxrec-pages/profile/boxrec.page.profile.other.common';
import { BoxrecPageProfilePromoter } from './boxrec-pages/profile/boxrec.page.profile.promoter';
import { BoxrecPageRatings } from './boxrec-pages/ratings/boxrec.page.ratings';
import { BoxrecRatingsParams } from './boxrec-pages/ratings/boxrec.ratings.constants';
import { BoxrecResultsParams } from './boxrec-pages/results/boxrec.results.constants';
import { BoxrecPageSchedule } from './boxrec-pages/schedule/boxrec.page.schedule';
import { BoxrecScheduleParams } from './boxrec-pages/schedule/boxrec.schedule.constants';
import { BoxrecSearch, BoxrecSearchParams, BoxrecStatus } from './boxrec-pages/search/boxrec.search.constants';
import { BoxrecPageTitle } from './boxrec-pages/title/boxrec.page.title';
import { BoxrecTitlesParams } from './boxrec-pages/titles/boxrec.page.title.constants';
import { BoxrecPageVenue } from './boxrec-pages/venue/boxrec.page.venue';
import { BoxrecPageWatchRow } from './boxrec-pages/watch/boxrec.page.watch.row';
export declare class Boxrec {
    /**
     * Makes a request to BoxRec to log the user in
     * This is required before making any additional calls
     * The session cookie is stored inside this class and lost
     * Note: credentials are sent over HTTP, BoxRec doesn't support HTTPS
     * @param {string} username     your BoxRec username
     * @param {string} password     your BoxRec password
     * @returns {Promise<string>}    the BoxRec log in cookie to make subsequent requests
     *
     */
    static login(username: string, password: string): Promise<string>;
    /**
     * Makes a request to BoxRec to get information about an individual bout
     * @param {string} cookies
     * @param {string} eventBoutId
     * @returns {Promise<BoxrecPageEventBout>}
     */
    static getBoutById(cookies: string, eventBoutId: string): Promise<BoxrecPageEventBout>;
    /**
     * Makes a request to BoxRec to return/save the PDF version of a boxer profile
     * @param {string} cookies
     * @param {number} globalId     the BoxRec global id of the boxer
     * @param {string} pathToSaveTo directory to save to.  if not used will only return data
     * @param {string} fileName     file name to save as.  Will save as {globalId}.pdf as default.  Add .pdf to end of filename
     * @returns {Promise<string>}
     */
    static getBoxerPDF(cookies: string, globalId: number, pathToSaveTo?: string, fileName?: string): Promise<string>;
    /**
     * Makes a request to BoxRec to return/save the printable version of a boxer profile
     * @param {string} cookies
     * @param {number} globalId     the BoxRec global id of the boxer
     * @param {string} pathToSaveTo directory to save to.  if not used will only return data
     * @param {string} fileName     file name to save as.  Will save as {globalId}.html as default.  Add .html to end of filename
     * @returns {Promise<string>}
     */
    static getBoxerPrint(cookies: string, globalId: number, pathToSaveTo?: string, fileName?: string): Promise<string>;
    /**
     * Makes a request to BoxRec to return a list of current champions
     * @param {string} cookies
     * @returns {Promise<BoxrecPageChampions>}
     */
    static getChampions(cookies: string): Promise<BoxrecPageChampions>;
    /**
     * Makes a request to BoxRec to get events/bouts on the particular date
     * @param {string} cookies
     * @param {BoxrecDate} params
     * @returns {Promise<void>}
     */
    static getDate(cookies: string, params: BoxrecDate): Promise<BoxrecPageDate>;
    /**
     * Makes a request to BoxRec to retrieve an event by id
     * @param {string} cookies
     * @param {number} eventId      the event id from BoxRec
     * @returns {Promise<BoxrecPageEvent>}
     */
    static getEventById(cookies: string, eventId: number): Promise<BoxrecPageEvent>;
    /**
     * Makes a request to BoxRec to list events by location
     * @param {string} cookies
     * @param {BoxrecLocationEventParams} params    params included in this search
     * @param {BoxrecLocationEventParams.sport} params.sports   if this is not a valid option, will send strange results
     * @param {number} offset                       the number of rows to offset the search
     * @returns {Promise<BoxrecPageLocationEvent>}
     */
    static getEventsByLocation(cookies: string, params: BoxrecLocationEventParams, offset?: number): Promise<BoxrecPageLocationEvent>;
    /**
     * Make a request to BoxRec to search for people by location
     * @param {string} cookies
     * @param {BoxrecLocationsPeopleParams} params  params included in this search
     * @param {number} offset                       the number of rows to offset the search
     * @returns {Promise<BoxrecPageLocationPeople>}
     */
    static getPeopleByLocation(cookies: string, params: BoxrecLocationsPeopleParams, offset?: number): Promise<BoxrecPageLocationPeople | BoxrecPageLocationBoxer>;
    /**
     * Make a request to BoxRec to get a person by their BoxRec Global ID
     * @param {string} cookies
     * @param {number} globalId     the BoxRec profile id
     * @param {BoxrecRole} role     the role of the person in boxing (there seems to be multiple profiles for people if they fall under different roles)
     * @param {number} offset       offset number of bouts/events in the profile
     *                              We offset by number and not pages because the number of bouts per page may change
     * @returns {Promise<BoxrecPageProfileBoxer | BoxrecPageProfileOtherCommon | BoxrecPageProfileEvents | BoxrecPageProfileManager>}
     */
    static getPersonById(cookies: string, globalId: number, role?: BoxrecRole | null, offset?: number): Promise<BoxrecPageProfileBoxer | BoxrecPageProfileOtherCommon | BoxrecPageProfileEvents | BoxrecPageProfileManager | BoxrecPageProfilePromoter>;
    /**
     * Makes a request to BoxRec to get a list of ratings/rankings, either P4P or by a single weight class
     * @param {string} cookies
     * @param {BoxrecRatingsParams} params      params included in this search
     * @param {number} offset                   the number of rows to offset the search
     * @returns {Promise<BoxrecPageRatings>}
     */
    static getRatings(cookies: string, params: BoxrecRatingsParams, offset?: number): Promise<BoxrecPageRatings>;
    /**
     * Makes a request to BoxRec to get a list of results.
     * Uses same class
     * @param {string} cookies
     * @param {BoxrecResultsParams} params  params included in this search
     * @param {number} offset               the number of rows to offset this search
     * @returns {Promise<BoxrecPageSchedule>}
     */
    static getResults(cookies: string, params: BoxrecResultsParams, offset?: number): Promise<BoxrecPageSchedule>;
    /**
     * Makes a request to BoxRec to get a list of scheduled events
     * @param {string} cookies
     * @param {BoxrecScheduleParams} params     params included in this search
     * @param {number} offset                   the number of rows to offset the search
     * @returns {Promise<BoxrecPageSchedule>}
     */
    static getSchedule(cookies: string, params: BoxrecScheduleParams, offset?: number): Promise<BoxrecPageSchedule>;
    /**
     * Makes a request to BoxRec to the specific title URL to get a belt's history
     * @param {string} cookies
     * @param {string} titleString  in the format of "6/Middleweight" which would be the WBC Middleweight title
     * @param {number} offset       the number of rows to offset the search
     * @returns {Promise<BoxrecPageTitle>}
     */
    static getTitleById(cookies: string, titleString: string, offset?: number): Promise<BoxrecPageTitle>;
    /**
     * Makes a request to BoxRec to return scheduled and previous bouts in regards to a belt/division
     * @param {string} cookies
     * @param {BoxrecTitlesParams} params
     * @param {number} offset
     * @returns {Promise<any>}
     */
    static getTitles(cookies: string, params: BoxrecTitlesParams, offset?: number): Promise<any>;
    /**
     * Makes a request to BoxRec to get the information of a venue
     * @param {string} cookies
     * @param {number} venueId
     * @param {number} offset   the number of rows to offset the search
     * @returns {Promise<BoxrecPageVenue>}
     */
    static getVenueById(cookies: string, venueId: number, offset?: number): Promise<BoxrecPageVenue>;
    /**
     * Lists all boxers that are watched by the user
     * @param {string} cookies
     * @returns {Promise<BoxrecPageWatchRow>}
     */
    static getWatched(cookies: string): Promise<BoxrecPageWatchRow[]>;
    /**
     * Makes a request to BoxRec to search people by name, role and if they are active
     * Note: currently only supports boxers
     * @param {string} cookies
     * @param {BoxrecSearchParams} params   params included in this search
     * @param {number}             offset   the number of rows to offset the search
     * @returns {Promise<BoxrecSearch[]>}
     */
    static search(cookies: string, params: BoxrecSearchParams, offset?: number): Promise<BoxrecSearch[]>;
    /**
     * Removes the boxer from the users watch list, returns true if they were successfully removed
     * @param {string} cookies
     * @param {number} boxerGlobalId
     * @returns {Promise<boolean>}
     */
    static unwatch(cookies: string, boxerGlobalId: number): Promise<boolean>;
    /**
     * Adds the boxer to the users watch list, returns true if they were successfully added to the list
     * @param {string} cookies
     * @param {number} boxerGlobalId
     * @returns {Promise<boolean>}
     */
    static watch(cookies: string, boxerGlobalId: number): Promise<boolean>;
    /**
     * Makes a search request to BoxRec to get all people that match that name
     * by using a generator, we're able to prevent making too many calls to BoxRec
     * @param {string} cookies
     * @param {string} firstName            the person's first name
     * @param {string} lastName             the person's last name
     * @param {string} role                 the role of the person
     * @param {BoxrecStatus} status         whether the person is active in Boxing or not
     * @param {number} offset               the number of rows to offset the search
     * @yields {BoxrecPageProfileBoxer | BoxrecPageProfileOtherCommon | BoxrecPageProfileEvents | BoxrecPageProfileManager}         returns a generator to fetch the next person by ID
     */
    static getPeopleByName(cookies: string, firstName: string, lastName: string, role?: BoxrecRole, status?: BoxrecStatus, offset?: number): AsyncIterableIterator<BoxrecPageProfileBoxer | BoxrecPageProfileOtherCommon | BoxrecPageProfileEvents | BoxrecPageProfileManager>;
    /**
     * Returns/saves a boxer's profile in print/pdf format
     * @param {string} cookies
     * @param {number} globalId
     * @param {"pdf" | "print"} type
     * @param {string} pathToSaveTo
     * @param {string} fileName
     * @returns {Promise<string>}
     */
    private static getBoxerOther;
}
