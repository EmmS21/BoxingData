/// <reference types="cheerio" />
import { BoxrecTitles } from '../../../boxrec-common-tables/boxrec-common.constants';
import { OutputInterface } from '../../../decorators/output.decorator';
import { BoxrecBasic, BoxrecJudge, Record, Stance } from '../../boxrec.constants';
import { WeightDivision } from '../../champions/boxrec.champions.constants';
import { BoxrecPageEvent } from '../boxrec.page.event';
import { BoutPageBoutOutcome, BoutPageLast6, BoxrecEventBoutOutput } from './boxrec.event.bout.constants';
/**
 * Parse a BoxRec bout page
 * Note: because BoxRec is using inline styles for a lot of things, can't guarantee perfect results.  Report issues
 * <pre>http://boxrec.com/en/event/726555/2037455</pre>
 */
export declare class BoxrecPageEventBout extends BoxrecPageEvent implements OutputInterface {
    output: BoxrecEventBoutOutput;
    private static parseOutcome;
    get date(): string | null;
    get division(): WeightDivision | null;
    get firstBoxer(): BoxrecBasic;
    get firstBoxerAge(): number | null;
    get firstBoxerHeight(): number[] | null;
    get firstBoxerKOs(): number;
    get firstBoxerLast6(): BoutPageLast6[];
    get firstBoxerPointsAfter(): number | null;
    /**
     * Ranking is not the boxer ranking at the time of the bout but the ranking at this current time
     */
    get firstBoxerRanking(): number | null;
    get firstBoxerReach(): number[] | null;
    get firstBoxerRecord(): Record;
    get firstBoxerStance(): Stance | null;
    get judges(): BoxrecJudge[];
    /**
     * Returns a number of rounds sanctioned for this bout if it has that number
     * @returns {number | null}
     */
    get numberOfRounds(): number | null;
    get outcome(): BoutPageBoutOutcome;
    get rating(): number | null;
    get referee(): BoxrecBasic;
    get secondBoxer(): BoxrecBasic;
    get secondBoxerAge(): number | null;
    get secondBoxerHeight(): number[] | null;
    get secondBoxerKOs(): number;
    get secondBoxerLast6(): BoutPageLast6[];
    get secondBoxerPointsAfter(): number | null;
    /**
     * Ranking is not the boxer ranking at the time of the bout but the ranking at this current time
     */
    get secondBoxerRanking(): number | null;
    get secondBoxerReach(): number[] | null;
    get secondBoxerRecord(): Record;
    get secondBoxerStance(): Stance | null;
    get titles(): BoxrecTitles[];
    protected getPeopleTable(): Cheerio;
    /**
     * Searches page for table columns with `b` tag where the text matches
     * @param {string} textToFind
     * @returns {Cheerio}
     */
    private findColumnByText;
    private getBoxersSideObjRow;
    private getKOs;
    private getRecord;
    private parseBoxerAge;
    private parseBoxerHeight;
    private parseBoxerReach;
    /**
     * Parses the boxer row
     * @param {number} tableColumn  needs to be the first or third column
     * @returns {Stance | null}
     */
    private parseBoxerStance;
    private parseBoxers;
    private parseDivision;
    private parseJudges;
    private parseLast6;
    private parseLast6Object;
    /**
     * Used to get the string of the table row where the stats are to the left/right of it (ex. age, height)
     * @param {string} textToFind
     * @param {number} tableColumn
     * @returns {Cheerio | string}
     */
    private parseMiddleRowByText;
    private parseOutcomeOfBout;
    private parsePoints;
    private parseRanking;
    private parseRankingData;
    private parseTitles;
}
