/// <reference types="cheerio" />
/**
 * Converts fractional symbols into decimals
 * @param {string} fraction
 * @returns {number}
 */
export declare function convertFractionsToNumber(fraction: string): number;
/**
 * Removes whitespace at the start and end of the string, remove line breaks and removes occurrences where multiple spaces occur
 * @param {string} str
 * @returns {string}
 */
export declare function trimRemoveLineBreaks(str: string): string;
/**
 * Changes a string to camelCase
 * @param {string} str
 * @example "foo bar" becomes "fooBar"
 * @returns {string}
 */
export declare function changeToCamelCase(str: string): string;
/**
 * Takes CheerioStatic and tries to find column data by finding the table header index and then gets that columns data
 * Nice thing about this is that if the column number changes, the data will not fail and tests will pass
 * Don't throw errors inside otherwise it blows up when retrieving all data
 * @param $                 the cheerio static item that will have the "mock" fake table row
 * @param tableColumnsArr   contains the name of the table headers
 * @param columnHeaderText  the header text we are searching for, throws error if it cannot find it todo make type
 * @param returnHTML
 */
export declare function getColumnDataByColumnHeader($: CheerioStatic, tableColumnsArr: string[], columnHeaderText: BoxrecCommonTableHeader, returnHTML?: boolean): string;
/**
 * Common table header text that is used to quickly find data if the column number changes or the header name changes
 * synthetic headers don't actually exist but are used to classify a column as that type of data
 */
export declare enum BoxrecCommonTableHeader {
    age = "age",
    career = "career",
    date = "date",
    day = "day",
    debut = "debut",
    division = "division",
    fighter = "fighter",
    firstLast6 = "firstLast6",
    firstFighterWeight = "firstFighterWeight",
    firstRating = "firstRating",
    links = "links",
    location = "location",
    miles = "miles",
    name = "name",
    outcome = "outcome",
    opponent = "opponent",
    outcomeByWayOf = "outcomeByWayOf",
    points = "points",
    rating = "rating",
    residence = "residence",
    result = "result",
    rounds = "rounds",
    secondLast6 = "secondLast6",
    secondFighterWeight = "secondFighterWeight",
    secondRating = "secondRating",
    secondRecord = "secondw-l-d",
    sport = "sport",
    stance = "stance",
    record = "w-l-d",
    sex = "sex",
    tick = "tick",
    venue = "venue"
}
export declare function getValueForHeadersArr(headersArr: string[], firstValue: BoxrecCommonTableHeader, secondValue: BoxrecCommonTableHeader): any;
/**
 * Returns an array of all row data from a specific column
 * @param tableEl       the table element to check from
 * @param columnNumber  the column number to get the data
 * @param returnHTML    optionally return the full HTML of the column
 */
export declare function getTableColumnData(tableEl: Cheerio, columnNumber?: number, returnHTML?: boolean): string[];
/**
 * Takes a table element and returns what the order of column headers and what each column is
 * @param tableEl
 * @param theadNumber   Some tables have more than 1 thead tag
 */
export declare function getHeaderColumnText(tableEl: Cheerio, theadNumber?: number): BoxrecCommonTableHeader[];
export declare const locationFlagSelector = "*[class*=\"flag\"]";
export declare const townRegionCountryRegex: RegExp;
/**
 * Strips the commas out of a string.  Used for strings that are large numbers
 * @param {string} str
 * @returns {string}
 */
export declare const stripCommas: (str: string) => string;
/**
 * Strips the dataTable arrows from table headers
 * @param str
 */
export declare const stripArrows: (str: string) => string;
export declare const whatTypeOfLink: (href: string) => 'town' | 'region' | 'country';
export declare const getLocationValue: (href: string, type: 'town' | 'region' | 'country') => string | number | null;
export declare const replaceWithWeight: (str: string) => string;
export declare const parseHeight: (height: string | void) => number[] | null;
