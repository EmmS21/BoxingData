import { BoxrecDate, BoxrecLocationEventParams, BoxrecLocationsPeopleParams, BoxrecRatingsParams, BoxrecResultsParams, BoxrecRole, BoxrecScheduleParams, BoxrecSearchParams, BoxrecStatus, BoxrecTitlesParams, ScoreCard } from "./boxrec-requests.constants";
/**
 * Makes API requests to BoxRec and returns the HTML body
 */
export declare class BoxrecRequests {
    /**
     * Makes a request to get Bout Information
     * @param cookies       contains cookie information about the user
     * @param eventBoutId   includes both the event and bout separated by "/"
     */
    static getBout(cookies: string, eventBoutId: string): Promise<string>;
    /**
     * Makes a request to BoxRec to return/save the PDF version of a boxer profile
     * @param cookies      contains cookie information about the user
     * @param globalId     the BoxRec global id of the boxer
     * @returns {Promise<string>}
     */
    static getBoxerPDF(cookies: string, globalId: number): Promise<string>;
    /**
     * Makes a request to BoxRec to return/save the printable version of a boxer profile
     * @param cookies      contains cookie information about the user
     * @param globalId     the BoxRec global id of the boxer
     * @returns {Promise<string>}
     */
    static getBoxerPrint(cookies: string, globalId: number): Promise<string>;
    /**
     * Makes a request to BoxRec to return a list of current champions
     * @param cookies      contains cookie information about the user
     * @returns {Promise<string>}
     */
    static getChampions(cookies: string): Promise<string>;
    /**
     * Makes a request to BoxRec to get events/bouts on the particular date
     * @param cookies               contains cookie information about the user
     * @param {BoxrecDate} params
     * @returns {Promise<void>}
     */
    static getDate(cookies: string, params: BoxrecDate): Promise<string>;
    /**
     * Makes a request to BoxRec to retrieve an event by id
     * @param cookies               contains cookie information about the user
     * @param {number} eventId      the event id from BoxRec
     * @returns {Promise<string>}
     */
    static getEventById(cookies: string, eventId: number): Promise<string>;
    /**
     * Makes a request to BoxRec to list events by sport/location
     * @param cookies                               contains cookie information about the user
     * @param {BoxrecLocationEventParams} params    params included to get events by location
     * @param {number} offset                       the number of rows to offset the search
     * @returns {Promise<string>}
     */
    static getEvents(cookies: string, params: BoxrecLocationEventParams, offset?: number): Promise<string>;
    /**
     * Makes a request to BoxRec to list events by sport/location
     * @deprecated              This method is now more than location, and is also by sport (use `getPeople`)
     * @param cookies                               contains cookie information about the user
     * @param {BoxrecLocationEventParams} params    params included to get events by location
     * @param {number} offset                       the number of rows to offset the search
     * @returns {Promise<string>}
     */
    static getEventsByLocation(cookies: string, params: BoxrecLocationEventParams, offset?: number): Promise<string>;
    /**
     * Make a request to BoxRec to search for people by location/role
     * @param cookies                               contains cookie information about the user
     * @param {BoxrecLocationsPeopleParams} params  params included to get people by location/role
     * @param {number} offset                       the number of rows to offset the search
     * @returns {Promise<string>}
     */
    static getPeople(cookies: string, params: BoxrecLocationsPeopleParams, offset?: number): Promise<string>;
    /**
     * Make a request to BoxRec to search for people by location/role
     * @deprecated              This method is now more than location, and is also by sport (use `getPeople`)
     * @param cookies                               contains cookie information about the user
     * @param {BoxrecLocationsPeopleParams} params  params included to get people by location
     * @param {number} offset                       the number of rows to offset the search
     * @returns {Promise<string>}
     */
    static getPeopleByLocation(cookies: string, params: BoxrecLocationsPeopleParams, offset?: number): Promise<string>;
    /**
     * Makes a search request to BoxRec to get all people that match that name
     * by using a generator, we're able to prevent making too many calls to BoxRec
     * @param cookies                       contains cookie information about the user
     * @param {string} firstName            the person's first name
     * @param {string} lastName             the person's last name
     * @param {string} role                 the role of the person
     * @param {BoxrecStatus} status         whether the person is active in Boxing or not
     * @param {number} offset               the number of rows to offset the search
     * @yields {string}                     returns a generator to fetch the next person by ID
     */
    static getPeopleByName(cookies: string, firstName: string, lastName: string, role?: BoxrecRole | "" | "fighters", status?: BoxrecStatus, offset?: number): Promise<string>;
    /**
     * Make a request to BoxRec to get a person by their BoxRec Global ID
     * @param cookies                           contains cookie information about the user
     * @param {number} globalId                 the BoxRec profile id
     * @param {BoxrecRole} role                 the role of the person in boxing (there are multiple profiles for people if they fall under different roles)
     * @param {number} offset                   offset number of bouts/events in the profile.  todo boxer support?
     * @returns {Promise<string>}
     */
    static getPersonById(cookies: string, globalId: number, role?: BoxrecRole | null, offset?: number): Promise<string>;
    /**
     * Makes a request to BoxRec to get a list of ratings/rankings, either P4P or by a single weight class
     * @param cookies                           contains cookie information about the user
     * @param {BoxrecRatingsParams} params      params included to get ratings
     * @param {number} offset                   the number of rows to offset the search
     * @returns {Promise<string>}
     */
    static getRatings(cookies: string, params: BoxrecRatingsParams, offset?: number): Promise<string>;
    /**
     * Makes a request to BoxRec to get a list of results.
     * Uses same class
     * @param cookies                       contains cookie information about the user
     * @param {BoxrecResultsParams} params  params included to get results
     * @param {number} offset               the number of rows to offset this search
     * @returns {Promise<string>}
     */
    static getResults(cookies: string, params: BoxrecResultsParams, offset?: number): Promise<string>;
    /**
     * Makes a request to BoxRec to get a list of scheduled events
     * @param cookies                           contains cookie information about the user
     * @param {BoxrecScheduleParams} params     params included to get schedule
     * @param {number} offset                   the number of rows to offset the search
     * @returns {Promise<string>}
     */
    static getSchedule(cookies: string, params: BoxrecScheduleParams, offset?: number): Promise<string>;
    /**
     * Makes a request to BoxRec to list all the scores of the user
     * @param cookies                            contains cookie information about the user
     * @returns {Promise<string>}
     */
    static listScores(cookies: string): Promise<string>;
    /**
     * Makes a request to BoxRec to list all the scores of a single bout (including the user and fans)
     * @param cookies                           contains cookie information about the user
     * @param boutId                            the ID of the bout
     * @returns {Promise<string>}
     */
    static getScoresByBoutId(cookies: string, boutId: number): Promise<string>;
    /**
     * Makes a request to BoxRec to update the user's score of a bout
     * @param cookies                           contains cookie information about the user
     * @param boutId                            the ID of the bout
     * @param scorecard                         an array of numbers that represent the points for each fighter per round
     * @returns {Promise<string>}
     */
    static updateScoreByBoutId(cookies: string, boutId: number, scorecard: ScoreCard): Promise<string>;
    /**
     * Makes a request to BoxRec to the specific title URL to get a belt's history
     * @param cookies               contains cookie information about the user
     * @param {string} titleString  in the format of "6/Middleweight" which would be the WBC Middleweight title
     * @param {number} offset       the number of rows to offset the search
     * @returns {Promise<string>}
     * @todo offset not used?  Does this link work?
     */
    static getTitleById(cookies: string, titleString: string, offset?: number): Promise<string>;
    /**
     * Makes a request to BoxRec to get information on scheduled title fights
     * @param cookies                contains cookie information about the user
     * @param params
     * @param offset
     */
    static getTitles(cookies: string, params: BoxrecTitlesParams, offset?: number): Promise<string>;
    /**
     * Makes a request to BoxRec to get the information of a venue
     * @param cookies           contains cookie information about the user
     * @param {number} venueId
     * @param {number} offset   the number of rows to offset the search
     * @returns {Promise<string>}
     */
    static getVenueById(cookies: string, venueId: number, offset?: number): Promise<string>;
    /**
     * Lists the boxers that the user is watching
     * @param {request.CookieJar} cookies
     * @returns {Promise<string>}
     */
    static getWatched(cookies: string): Promise<string>;
    /**
     * Makes a request to BoxRec to log the user in
     * This is required before making any additional calls
     * The session cookie is stored inside this instance of the class
     * @param {string} username     your BoxRec username
     * @param {string} password     your BoxRec password
     * @returns     If the response is a string, you have successfully logged in.  Otherwise an error should be thrown
     */
    static login(username: string, password: string): Promise<string>;
    /**
     * Makes a request to BoxRec to search people by
     * Note: currently only supports boxers
     * @param cookies                       contains cookie information about the user
     * @param {BoxrecSearchParams} params   params included in this search
     * @param {number}             offset   the number of rows to offset the search
     * @returns {Promise<string>}
     */
    static search(cookies: string, params: BoxrecSearchParams, offset?: number): Promise<string>;
    /**
     * Removes the boxer from the users watch list.  Returns the watch page where the boxer should be removed
     * @param cookies    contains cookie information about the user
     * @param {number} boxerGlobalId
     * @returns {Promise<boolean>}
     */
    static unwatch(cookies: string, boxerGlobalId: number): Promise<string>;
    /**
     * Adds the boxer to the users watch list.  Returns the watch page where the boxer should have been added
     * @param cookies    contains cookie information about the user
     * @param {number} boxerGlobalId
     * @returns {Promise<boolean>}
     */
    static watch(cookies: string, boxerGlobalId: number): Promise<string>;
    /**
     * Search for global ID or string
     * better for searching by global ID.  `search` doesn't have it
     * @param cookies
     * @param globalIdOrSearchText
     * @param searchRole    By default this is empty and returns the default role of the user
     */
    private static quickSearch;
    private static buildResultsSchedulesParams;
    /**
     * Returns/saves a boxer's profile in print/pdf format
     * @param cookies                       contains cookie information about the user
     * @param {number} globalId
     * @param {"pdf" | "print"} type
     * @todo support role as it's not just boxers (ex. amateurs)
     * @returns {Promise<string>}
     */
    private static getBoxerOther;
    private static getRatingsParamWrap;
    /**
     * Makes a request to BoxRec to get the search param prefix that is wrapped around params for the `results` page
     * @param cookies
     */
    private static getResultsParamWrap;
    /**
     * Makes a request to BoxRec to find out the quick search param prefix that is wrapped around params
     * @param cookies
     */
    private static getQuickSearchParamWrap;
    /**
     * Makes a request to BoxRec to find out the search param prefix that is wrapped around params
     * @param cookies
     */
    private static getSearchParamWrap;
    /**
     * Makes a request to BoxRec to get the titles param prefix that is wrapped around params for the `titles` page
     * @param cookies
     */
    private static getTitlesParamWrap;
    /**
     * Returns the number of table columns on the page in dataTables
     * Note: Due to the selector be lazy and the poor HTML structure on BoxRec, this selector also includes other tables
     *      like enrollments.  We don't care about that though, we're just comparing the page with toggleRatings to get
     *      the most columns we can
     * @param boxrecPageBody
     */
    private static numberOfTableColumns;
    /**
     *
     * @param cookies
     * @param globalId
     * @param role
     * @param offset        offset is the number of bouts/events on a person's profile (not tested with boxers)
     * @param previousRequestBody  we'll compare both requests and return the one with more columns
     *                                          the reason for this is because it's hard to determine and keep up
     *                                          BoxRec column changes, therefore we just take the one with most columns
     */
    private static makeGetPersonByIdRequest;
}
